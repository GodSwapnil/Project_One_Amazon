E-commerce Sales and Customer Analytics Queries (MS SQL)
This collection of Microsoft SQL Server queries is designed for deep-dive analysis into e-commerce data, covering sales performance, customer behavior, and inventory management.

Query 1: Top Selling Products
Goal: Identify the top 10 products by total sales value. Output: Product name, total quantity sold, and total sales value.

SQL

SELECT TOP 10
    product_name,
    quantity,
    SUM(quantity * price_per_unit) AS total_value
FROM
    products p
JOIN
    order_items oi ON p.product_id = oi.product_id
GROUP BY
    product_name, quantity
ORDER BY
    total_value DESC;

Query 2: Revenue by Category & Percentage Contribution
Goal: Calculate the total revenue generated by each product category and include the percentage contribution of each category to the total sale.

Optional Method 1: Using Subqueries
SQL

WITH cte AS (
    SELECT
        category_name,
        SUM(quantity * price_per_unit) AS total_sales
    FROM
        products p
    JOIN
        category c ON p.category_id = c.category_id
    JOIN
        order_items oi ON oi.product_id = p.product_id
    GROUP BY
        category_name
)

SELECT
    category_name,
    total_sales,
    (total_sales * 100.0) / (SELECT SUM(total_sales) FROM cte)
FROM
    cte
ORDER BY
    category_name;
Optional Method 2: Using Window Functions (Recommended)
SQL

WITH cte AS (
    SELECT
        category_name,
        SUM(quantity * price_per_per_unit) AS total_sales
    FROM
        products p
    JOIN
        category c ON p.category_id = c.category_id
    JOIN
        order_items oi ON oi.product_id = p.product_id
    GROUP BY
        category_name
)

SELECT
    category_name,
    total_sales,
    total_sales * 100.0 / SUM(total_sales) OVER () AS cat_percentage
FROM
    cte
ORDER BY
    category_name;
Query 3: Average Order Value by Customer
Goal: Compute the average order value for each customer, but include only customers who have placed more than 5 orders.

SQL

SELECT
    CONCAT(c.first_name, ' ', c.last_name),
    SUM(quantity * price_per_unit),
    COUNT(oi.order_id)
FROM
    order_items oi
JOIN
    orders o ON oi.order_id = o.order_id
JOIN
    customers c ON o.customer_id = c.Customer_ID
GROUP BY
    CONCAT(c.first_name, ' ', c.last_name)
HAVING
    COUNT(oi.order_id) > 5;
Query 4: Monthly Total Sales & YoY Comparison
Goal: Calculate monthly total sales over the last year. Display the sales trend, grouped by month and year, including the current month's sale and the last month's sale using the LAG function.

SQL

SELECT
    MONTH(order_date) AS months,
    YEAR(order_date) AS years,
    SUM(quantity * price_per_unit) AS total_sale,
    LAG(SUM(quantity * price_per_unit), 1) OVER(PARTITION BY YEAR(order_date) ORDER BY MONTH(order_date)) AS previous_month_sale
FROM
    orders o
JOIN
    order_items oi ON o.order_id = oi.order_id
WHERE
    YEAR(order_date) BETWEEN '2023' AND '2024'
GROUP BY
    YEAR(order_date), MONTH(order_date);
Query 5: Customers with No Purchase
Goal: Find customers who have registered but have not placed any orders. List customer details and the time since they registered.

Method 1: Using LEFT JOIN
SQL

SELECT
    c.*
FROM
    customers c
LEFT JOIN
    orders o ON c.Customer_ID = o.customer_id
WHERE
    order_id IS NULL
ORDER BY
    first_name;
Method 2: Using Sub-queries (NOT IN)
SQL

SELECT
    *
FROM
    customers
WHERE
    Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM orders)
ORDER BY
    first_name;
Query 6: Best Selling Category by State
Goal: Identify the best-selling product category for each state, including the total sales for that category within that state.

SQL

WITH cte AS (
    SELECT
        state,
        category_name,
        SUM(quantity * price_per_unit) AS total,
        DENSE_RANK() OVER(PARTITION BY state ORDER BY SUM(quantity * price_per_unit) DESC) AS rankk 
    FROM
        products p
    JOIN
        category c ON p.category_id = c.category_id
    JOIN
        order_items oi ON oi.product_id = p.product_id
    JOIN
        orders o ON o.order_id = oi.order_id
    JOIN
        customers ct ON ct.Customer_ID = o.customer_id
    GROUP BY
        state, category_name
)
SELECT
    *
FROM
    cte
WHERE
    rankk = 1;
Query 7: Inventory Stock Alert
Goal: Identify products with a stock level below the threshold (less than 10 units). Include the last restock date and warehouse information.

SQL

SELECT
    p.product_name,
    stock,
    last_stock_date,
    warehouse_id
FROM
    inventory i
JOIN
    products p ON i.product_id = p.product_id
WHERE
    stock < 10;
Query 8: Shipping Delay Identification
Goal: Identify orders where the shipping time is 5 days or later after the order date. Include customer and order details, and the delivery provider.

SQL

SELECT
    CONCAT(first_name, ' ', last_name) AS full_name,
    o.order_id,
    s.shipping_providers,
    DATEDIFF(day, order_date, shipping_date) AS total_days
FROM
    customers c
JOIN
    orders o ON c.Customer_ID = o.customer_id
JOIN
    shipping s ON s.order_id = o.order_id
WHERE
    DATEDIFF(day, order_date, shipping_date) >= 5;
Query 9: Calculate Payment Success Rate
Goal: Calculate the successful payment percentage across all orders. Include payment status for failed and pending transactions.

SQL

WITH cte AS (
    SELECT
        payment_status,
        COUNT(*) AS total
    FROM
        payments
    GROUP BY
        payment_status
)

SELECT
    payment_status,
    total,
    CAST(total * 100.0 / SUM(total) OVER () AS DECIMAL(10, 2)) AS percentage
FROM
    cte;
Query 10: Most Returned Product
Goal: Identify the top returned products and show the return rate percentage of total units sold for each product.

SQL

SELECT
    p.product_id,
    p.product_name,
    COUNT(*) AS total_units_sold,
    SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) AS total_returned,
    (SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS return_percentage
FROM
    products p
JOIN
    order_items oi ON p.product_id = oi.product_id
JOIN
    orders o ON o.order_id = oi.order_id
GROUP BY
    p.product_id, p.product_name;
Query 11: Customer Classification (Returning or New)
Goal: Classify customers as 'Returning' if they have more than 5 returned orders, or 'New' otherwise. List customer ID, name, total orders, and total returns.

SQL

WITH cte AS (
    SELECT
        c.customer_id,
        CONCAT(c.first_name, ' ', c.last_name) AS fullname,
        COUNT(*) AS total_orders,
        SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) AS total_returned
    FROM
        orders o
    JOIN
        customers c ON o.customer_id = c.Customer_ID
    GROUP BY
        c.customer_id, CONCAT(c.first_name, ' ', c.last_name)
)
SELECT
    *,
    CASE WHEN total_returned > 5 THEN 'Returning' ELSE 'New' END AS cxcategory
FROM
    cte;
Query 12: Top Customers by Sales in Each State
Goal: Identify the top customer (by total sales) in each state. Include the customer's name, state, total sales, and rank.

SQL

WITH cte AS (
    SELECT
        CONCAT(c.first_name, ' ', c.last_name) AS fullName,
        c.state,
        SUM(quantity * price_per_unit) AS total_sale,
        DENSE_RANK() OVER(PARTITION BY c.state ORDER BY SUM(quantity * price_per_unit) DESC) AS rankk
    FROM
        customers c
    JOIN
        orders o ON c.Customer_ID = o.customer_id
    JOIN
        order_items oi ON oi.order_id = o.order_id
    GROUP BY
        CONCAT(c.first_name, ' ', c.last_name), c.state
)
SELECT
    *
FROM
    cte
WHERE
    rankk = 1;
